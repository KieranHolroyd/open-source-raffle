// Code generated by Prisma (prisma@1.26.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  raffle: (where?: RaffleWhereInput) => Promise<boolean>;
  seller: (where?: SellerWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  raffle: (where: RaffleWhereUniqueInput) => RafflePromise;
  raffles: (args?: {
    where?: RaffleWhereInput;
    orderBy?: RaffleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Raffle>;
  rafflesConnection: (args?: {
    where?: RaffleWhereInput;
    orderBy?: RaffleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RaffleConnectionPromise;
  seller: (where: SellerWhereUniqueInput) => SellerPromise;
  sellers: (args?: {
    where?: SellerWhereInput;
    orderBy?: SellerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Seller>;
  sellersConnection: (args?: {
    where?: SellerWhereInput;
    orderBy?: SellerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SellerConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createRaffle: (data: RaffleCreateInput) => RafflePromise;
  updateRaffle: (args: {
    data: RaffleUpdateInput;
    where: RaffleWhereUniqueInput;
  }) => RafflePromise;
  updateManyRaffles: (args: {
    data: RaffleUpdateManyMutationInput;
    where?: RaffleWhereInput;
  }) => BatchPayloadPromise;
  upsertRaffle: (args: {
    where: RaffleWhereUniqueInput;
    create: RaffleCreateInput;
    update: RaffleUpdateInput;
  }) => RafflePromise;
  deleteRaffle: (where: RaffleWhereUniqueInput) => RafflePromise;
  deleteManyRaffles: (where?: RaffleWhereInput) => BatchPayloadPromise;
  createSeller: (data: SellerCreateInput) => SellerPromise;
  updateSeller: (args: {
    data: SellerUpdateInput;
    where: SellerWhereUniqueInput;
  }) => SellerPromise;
  updateManySellers: (args: {
    data: SellerUpdateManyMutationInput;
    where?: SellerWhereInput;
  }) => BatchPayloadPromise;
  upsertSeller: (args: {
    where: SellerWhereUniqueInput;
    create: SellerCreateInput;
    update: SellerUpdateInput;
  }) => SellerPromise;
  deleteSeller: (where: SellerWhereUniqueInput) => SellerPromise;
  deleteManySellers: (where?: SellerWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  raffle: (
    where?: RaffleSubscriptionWhereInput
  ) => RaffleSubscriptionPayloadSubscription;
  seller: (
    where?: SellerSubscriptionWhereInput
  ) => SellerSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RaffleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "picture_ASC"
  | "picture_DESC"
  | "desc_ASC"
  | "desc_DESC"
  | "daysLeft_ASC"
  | "daysLeft_DESC"
  | "ticketsSold_ASC"
  | "ticketsSold_DESC"
  | "numTickets_ASC"
  | "numTickets_DESC"
  | "minTickets_ASC"
  | "minTickets_DESC"
  | "active_ASC"
  | "active_DESC"
  | "winner_ASC"
  | "winner_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type SellerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface SellerUpdateInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface SellerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  AND?: SellerWhereInput[] | SellerWhereInput;
  OR?: SellerWhereInput[] | SellerWhereInput;
  NOT?: SellerWhereInput[] | SellerWhereInput;
}

export type RaffleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SellerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SellerWhereInput;
  AND?: SellerSubscriptionWhereInput[] | SellerSubscriptionWhereInput;
  OR?: SellerSubscriptionWhereInput[] | SellerSubscriptionWhereInput;
  NOT?: SellerSubscriptionWhereInput[] | SellerSubscriptionWhereInput;
}

export interface RaffleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  picture?: String;
  picture_not?: String;
  picture_in?: String[] | String;
  picture_not_in?: String[] | String;
  picture_lt?: String;
  picture_lte?: String;
  picture_gt?: String;
  picture_gte?: String;
  picture_contains?: String;
  picture_not_contains?: String;
  picture_starts_with?: String;
  picture_not_starts_with?: String;
  picture_ends_with?: String;
  picture_not_ends_with?: String;
  desc?: String;
  desc_not?: String;
  desc_in?: String[] | String;
  desc_not_in?: String[] | String;
  desc_lt?: String;
  desc_lte?: String;
  desc_gt?: String;
  desc_gte?: String;
  desc_contains?: String;
  desc_not_contains?: String;
  desc_starts_with?: String;
  desc_not_starts_with?: String;
  desc_ends_with?: String;
  desc_not_ends_with?: String;
  daysLeft?: Float;
  daysLeft_not?: Float;
  daysLeft_in?: Float[] | Float;
  daysLeft_not_in?: Float[] | Float;
  daysLeft_lt?: Float;
  daysLeft_lte?: Float;
  daysLeft_gt?: Float;
  daysLeft_gte?: Float;
  ticketsSold?: Float;
  ticketsSold_not?: Float;
  ticketsSold_in?: Float[] | Float;
  ticketsSold_not_in?: Float[] | Float;
  ticketsSold_lt?: Float;
  ticketsSold_lte?: Float;
  ticketsSold_gt?: Float;
  ticketsSold_gte?: Float;
  numTickets?: Float;
  numTickets_not?: Float;
  numTickets_in?: Float[] | Float;
  numTickets_not_in?: Float[] | Float;
  numTickets_lt?: Float;
  numTickets_lte?: Float;
  numTickets_gt?: Float;
  numTickets_gte?: Float;
  minTickets?: Float;
  minTickets_not?: Float;
  minTickets_in?: Float[] | Float;
  minTickets_not_in?: Float[] | Float;
  minTickets_lt?: Float;
  minTickets_lte?: Float;
  minTickets_gt?: Float;
  minTickets_gte?: Float;
  active?: Boolean;
  active_not?: Boolean;
  winner?: String;
  winner_not?: String;
  winner_in?: String[] | String;
  winner_not_in?: String[] | String;
  winner_lt?: String;
  winner_lte?: String;
  winner_gt?: String;
  winner_gte?: String;
  winner_contains?: String;
  winner_not_contains?: String;
  winner_starts_with?: String;
  winner_not_starts_with?: String;
  winner_ends_with?: String;
  winner_not_ends_with?: String;
  AND?: RaffleWhereInput[] | RaffleWhereInput;
  OR?: RaffleWhereInput[] | RaffleWhereInput;
  NOT?: RaffleWhereInput[] | RaffleWhereInput;
}

export interface RaffleUpdateManyMutationInput {
  name?: String;
  picture?: String;
  desc?: String;
  daysLeft?: Float;
  ticketsSold?: Float;
  numTickets?: Float;
  minTickets?: Float;
  active?: Boolean;
  winner?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
}

export interface RaffleUpdateInput {
  name?: String;
  picture?: String;
  desc?: String;
  daysLeft?: Float;
  ticketsSold?: Float;
  numTickets?: Float;
  minTickets?: Float;
  active?: Boolean;
  winner?: String;
}

export interface UserCreateInput {
  name: String;
  email: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface RaffleCreateInput {
  name: String;
  picture: String;
  desc?: String;
  daysLeft: Float;
  ticketsSold: Float;
  numTickets: Float;
  minTickets: Float;
  active: Boolean;
  winner?: String;
}

export type SellerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SellerUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
}

export interface RaffleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RaffleWhereInput;
  AND?: RaffleSubscriptionWhereInput[] | RaffleSubscriptionWhereInput;
  OR?: RaffleSubscriptionWhereInput[] | RaffleSubscriptionWhereInput;
  NOT?: RaffleSubscriptionWhereInput[] | RaffleSubscriptionWhereInput;
}

export interface SellerCreateInput {
  name: String;
  email: String;
  password: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface RaffleConnection {
  pageInfo: PageInfo;
  edges: RaffleEdge[];
}

export interface RaffleConnectionPromise
  extends Promise<RaffleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RaffleEdge>>() => T;
  aggregate: <T = AggregateRafflePromise>() => T;
}

export interface RaffleConnectionSubscription
  extends Promise<AsyncIterator<RaffleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RaffleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRaffleSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SellerSubscriptionPayload {
  mutation: MutationType;
  node: Seller;
  updatedFields: String[];
  previousValues: SellerPreviousValues;
}

export interface SellerSubscriptionPayloadPromise
  extends Promise<SellerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SellerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SellerPreviousValuesPromise>() => T;
}

export interface SellerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SellerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SellerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SellerPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSeller {
  count: Int;
}

export interface AggregateSellerPromise
  extends Promise<AggregateSeller>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSellerSubscription
  extends Promise<AsyncIterator<AggregateSeller>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SellerEdge {
  node: Seller;
  cursor: String;
}

export interface SellerEdgePromise extends Promise<SellerEdge>, Fragmentable {
  node: <T = SellerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SellerEdgeSubscription
  extends Promise<AsyncIterator<SellerEdge>>,
    Fragmentable {
  node: <T = SellerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Seller {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface SellerPromise extends Promise<Seller>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface SellerSubscription
  extends Promise<AsyncIterator<Seller>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface RafflePreviousValues {
  id: ID_Output;
  name: String;
  picture: String;
  desc?: String;
  daysLeft: Float;
  ticketsSold: Float;
  numTickets: Float;
  minTickets: Float;
  active: Boolean;
  winner?: String;
}

export interface RafflePreviousValuesPromise
  extends Promise<RafflePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  picture: () => Promise<String>;
  desc: () => Promise<String>;
  daysLeft: () => Promise<Float>;
  ticketsSold: () => Promise<Float>;
  numTickets: () => Promise<Float>;
  minTickets: () => Promise<Float>;
  active: () => Promise<Boolean>;
  winner: () => Promise<String>;
}

export interface RafflePreviousValuesSubscription
  extends Promise<AsyncIterator<RafflePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  desc: () => Promise<AsyncIterator<String>>;
  daysLeft: () => Promise<AsyncIterator<Float>>;
  ticketsSold: () => Promise<AsyncIterator<Float>>;
  numTickets: () => Promise<AsyncIterator<Float>>;
  minTickets: () => Promise<AsyncIterator<Float>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  winner: () => Promise<AsyncIterator<String>>;
}

export interface RaffleSubscriptionPayload {
  mutation: MutationType;
  node: Raffle;
  updatedFields: String[];
  previousValues: RafflePreviousValues;
}

export interface RaffleSubscriptionPayloadPromise
  extends Promise<RaffleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RafflePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RafflePreviousValuesPromise>() => T;
}

export interface RaffleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RaffleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RaffleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RafflePreviousValuesSubscription>() => T;
}

export interface SellerPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface SellerPreviousValuesPromise
  extends Promise<SellerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface SellerPreviousValuesSubscription
  extends Promise<AsyncIterator<SellerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface Raffle {
  id: ID_Output;
  name: String;
  picture: String;
  desc?: String;
  daysLeft: Float;
  ticketsSold: Float;
  numTickets: Float;
  minTickets: Float;
  active: Boolean;
  winner?: String;
}

export interface RafflePromise extends Promise<Raffle>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  picture: () => Promise<String>;
  desc: () => Promise<String>;
  daysLeft: () => Promise<Float>;
  ticketsSold: () => Promise<Float>;
  numTickets: () => Promise<Float>;
  minTickets: () => Promise<Float>;
  active: () => Promise<Boolean>;
  winner: () => Promise<String>;
}

export interface RaffleSubscription
  extends Promise<AsyncIterator<Raffle>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  desc: () => Promise<AsyncIterator<String>>;
  daysLeft: () => Promise<AsyncIterator<Float>>;
  ticketsSold: () => Promise<AsyncIterator<Float>>;
  numTickets: () => Promise<AsyncIterator<Float>>;
  minTickets: () => Promise<AsyncIterator<Float>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  winner: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRaffle {
  count: Int;
}

export interface AggregateRafflePromise
  extends Promise<AggregateRaffle>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRaffleSubscription
  extends Promise<AsyncIterator<AggregateRaffle>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface SellerConnection {
  pageInfo: PageInfo;
  edges: SellerEdge[];
}

export interface SellerConnectionPromise
  extends Promise<SellerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SellerEdge>>() => T;
  aggregate: <T = AggregateSellerPromise>() => T;
}

export interface SellerConnectionSubscription
  extends Promise<AsyncIterator<SellerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SellerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSellerSubscription>() => T;
}

export interface RaffleEdge {
  node: Raffle;
  cursor: String;
}

export interface RaffleEdgePromise extends Promise<RaffleEdge>, Fragmentable {
  node: <T = RafflePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RaffleEdgeSubscription
  extends Promise<AsyncIterator<RaffleEdge>>,
    Fragmentable {
  node: <T = RaffleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Raffle",
    embedded: false
  },
  {
    name: "Seller",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
